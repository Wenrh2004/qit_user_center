// Code generated by hertz generator.

package user

import (
	"context"
	"github.com/google/uuid"
	"golang.org/x/crypto/bcrypt"
	"user-center/biz/dal"
	"user-center/biz/dal/model"
	"user-center/biz/dal/query"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	user "user-center/biz/model/user"
)

// Register .
// @router /api/user/register [POST]
func Register(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.RegisterReq

	// 验证参数不为空
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	// 查询用户是否被注册
	userQuery := query.Use(dal.RDSHook).User
	users, err := userQuery.WithContext(ctx).Where(userQuery.Username.Eq(req.Username)).Find()
	if err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}
	if len(users) > 0 {
		c.String(consts.StatusBadRequest, "用户已被注册")
		return
	}

	// 创建用户
	// 密码加密
	hashPassword, err := bcrypt.GenerateFromPassword([]byte(req.Password), bcrypt.DefaultCost)
	userRegister := model.User{
		ID:       uuid.New().String(),
		Username: req.Username,
		Password: string(hashPassword),
	}

	if err := userQuery.WithContext(ctx).Create(&userRegister); err != nil {
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	resp := new(user.RegisterResp)
	resp.UserID = userRegister.ID
	c.JSON(consts.StatusOK, resp)
}

// Login .
// @router /api/user/login [POST]
func Login(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.LoginReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user.LoginResp)

	c.JSON(consts.StatusOK, resp)
}
